{"version":3,"file":"static/js/28.8af2f3cc.chunk.js","mappings":"qMACA,GAAgB,iBAAmB,sCAAsC,WAAa,gCAAgC,YAAc,iCAAiC,QAAU,6BAA6B,MAAQ,2BAA2B,eAAiB,oCAAoC,cAAgB,mCAAmC,aAAe,mC,6BCGzVA,EAAsB,SACjCC,GAEA,OAAOA,EAAMC,aAGFC,EAAkB,SAACF,GAC9B,OAAOA,EAAMC,YAAYE,SAGdC,EAAmB,SAACJ,GAA2C,IAAD,EACzE,iBAAOA,EAAMC,YAAYE,eAAzB,aAAO,EAA2BE,UAGvBC,EAAwB,SAACN,GACpC,OAAOA,EAAMC,YAAYM,QAGdC,EAAuB,SAClCR,GACwB,IAAD,IACvB,iBAAOA,EAAMC,YAAYE,eAAzB,iBAAO,EAA2BM,cAAlC,aAAO,EAAmCC,O,SCpB/BC,EAAgB,WAC3B,IAAIJ,GAASK,EAAAA,EAAAA,IAAeN,GACtBO,GAAWC,EAAAA,EAAAA,MAEjB,GAAgCC,EAAAA,EAAAA,WAAS,GAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAA0CF,EAAAA,EAAAA,UAASR,GAAnD,eAAOW,EAAP,KAAsBC,EAAtB,MAEAC,EAAAA,EAAAA,YAAU,WACRD,EAAiBZ,KAChB,CAACA,IAiBJ,OACE,4BACIS,IACA,0BACE,iBACEK,cApBe,WACvBJ,GAAY,IAoBJK,MAAO,CAAEC,MAAO,QAASC,SAAU,QAFrC,SAIGjB,MAINS,IACC,0BACE,kBACES,SAnBa,SAACC,GACtBP,EAAiBO,EAAEC,cAAcC,QAmBzBC,WAAS,EACTC,OA5BiB,WACzBb,GAAY,GACRC,IAAkBX,GACpBM,GAASkB,EAAAA,EAAAA,IAAgBb,KA0BnBU,MAAOV,EACPI,MAAO,CAAEE,SAAU,gB,sECxClBQ,EAAqB,WAChC,IAAM7B,GAAUS,EAAAA,EAAAA,IAAeV,GACzB+B,GAASrB,EAAAA,EAAAA,IAAesB,EAAAA,IACxBrB,GAAWC,EAAAA,EAAAA,MAEjB,IAAKX,EACH,OACE,SAACgC,EAAA,EAAD,CAAKC,GAAI,CAAEC,MAAO,QAAlB,UACE,SAACC,EAAA,EAAD,MASN,OACE,yBACGL,KAAM,OAAK9B,QAAL,IAAKA,OAAL,EAAKA,EAASoC,UACnB,gBAAKC,UAAWC,EAAAA,YAAhB,UACE,SAACC,EAAA,EAAD,CAAOC,UAAU,MAAMC,WAAW,SAASC,QAAS,EAApD,UACE,UAACC,EAAA,EAAD,CACEvB,MAAM,UACN,aAAW,iBACXwB,UAAU,QACVtB,SAbS,SAACC,GACpBb,GAASmC,EAAAA,EAAAA,IAAUtB,EAAEuB,OAAOC,MAAM,MAQ1B,WAME,kBAAOC,QAAM,EAACC,OAAO,UAAUC,KAAK,UACpC,SAACC,EAAA,EAAD,CAAe9B,SAAS,oBCnCzB+B,EAAkB,WAC7B,IAAMpD,GAAUS,EAAAA,EAAAA,IAAeV,GAG/B,GAFAsD,QAAQC,IAAItD,GAEc,QAAf,OAAPA,QAAO,IAAPA,OAAA,EAAAA,EAASE,UAAmB,CAC9B,IAAMqD,EAAUC,OAAOC,KAAP,OAAYzD,QAAZ,IAAYA,OAAZ,EAAYA,EAASE,UAAUwD,KAAI,SAACC,GAAD,OACjD,2BACGA,EADH,KACU,IACoB,MAApB,OAAP3D,QAAO,IAAPA,OAAA,EAAAA,EAASE,SAASyD,IACf,oBADH,OAEG3D,QAFH,IAEGA,OAFH,EAEGA,EAASE,SAASyD,KAJdA,MAOZ,OAAO,4CAAoBJ,KAE7B,OAAO,sF,mBCjBIK,EAAcC,EAAAA,GAAAA,IAAH,qP,GAaHA,EAAAA,GAAAA,GAAH,sFAMGA,EAAAA,GAAAA,MAAH,iIAQOA,EAAAA,GAAAA,IAAH,oHAOKA,EAAAA,GAAAA,MAAH,+L,SCzBXC,EAA4B,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QACvDC,EAAQL,EAAAA,GAAAA,IAAH,yNASII,QATJ,IASIA,EAAAA,EAAW,IAI1B,OAAKD,EAEEG,EAAAA,cACL,SAACD,EAAD,WACE,SAACN,EAAD,UAAcG,MAEhBK,SAASC,MANU,M,+ECUVC,EAAkB,WAC7B,IAAM5D,GAAWC,EAAAA,EAAAA,MACXX,GAAUS,EAAAA,EAAAA,IAAeV,GACzBG,GAAWO,EAAAA,EAAAA,IAAeR,GAC1BkB,EAAQ,CAAEe,MAAO,OAAQqC,aAAc,OAAQC,UAAW,SAE1DC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACb7C,OAAM,OAAE9B,QAAF,IAAEA,OAAF,EAAEA,EAASoC,OACjBwC,SAAQ,OAAE5E,QAAF,IAAEA,OAAF,EAAEA,EAAS4E,SACnBC,eAAc,OAAE7E,QAAF,IAAEA,OAAF,EAAEA,EAAS6E,eACzBC,0BAAyB,OAAE9E,QAAF,IAAEA,OAAF,EAAEA,EAAS8E,0BACpCC,QAAO,OAAE/E,QAAF,IAAEA,OAAF,EAAEA,EAAS+E,QAClB7E,SAAU,CACR8E,SAAU9E,EAAS8E,SACnBC,QAAS/E,EAAS+E,QAClBC,GAAIhF,EAASgF,GACbC,QAASjF,EAASiF,QAClBC,UAAWlF,EAASkF,UACpBC,QAASnF,EAASmF,QAClBC,OAAQpF,EAASoF,OACjBC,SAAUrF,EAASqF,WAGvBC,SAAU,SAACC,GACT,IAAMC,EAA0B,GA4BhC,OA3BKD,EAAOb,SAEA,UAAUe,KAAKF,EAAOb,YAChCc,EAAOd,SAAW,WAFlBc,EAAOd,SAAW,WAKfa,EAAOX,4BACVY,EAAOZ,0BAA4B,YAGhCW,EAAOV,UACVW,EAAOX,QAAU,YAGdU,EAAOvF,WACVwF,EAAOxF,SAAW,CAChBgF,GAAI,WACJF,SAAU,WACVM,OAAQ,WACRF,UAAW,WACXG,SAAU,WACVJ,QAAS,WACTF,QAAS,WACTI,QAAS,aAINK,GAETE,SAAU,SAACH,GACTpC,QAAQC,IAAImC,GACZ/E,GAASmF,EAAAA,EAAAA,IAAYJ,OAIzB,OACE,iBAAMG,SAAUnB,EAAOqB,aAAczD,UAAWC,EAAAA,EAAAA,KAAhD,UACE,SAACN,EAAA,EAAD,WACE,UAAC+D,EAAA,EAAD,YACE,SAACC,EAAA,GAAD,QACE/D,GAAId,EACJ8E,MAAM,YACNC,QAAQ,YACJzB,EAAO0B,cAAc,cAE1B1B,EAAO2B,QAAQxB,UAAYH,EAAOiB,OAAOd,WACxC,gBAAKzD,MAAO,CAAEC,MAAO,OAArB,SAA+BqD,EAAOiB,OAAOd,YAE/C,SAACyB,EAAA,EAAD,CACEJ,MAAO,oBACPK,SAAS,SAACC,EAAA,GAAD,UAAc9B,EAAO0B,cAAc,uBAE9C,SAACH,EAAA,GAAD,QACE/D,GAAId,EACJ8E,MAAM,yBACNC,QAAQ,YACJzB,EAAO0B,cAAc,+BAE1B1B,EAAO2B,QAAQtB,2BACdL,EAAOiB,OAAOZ,4BACZ,gBAAK3D,MAAO,CAAEC,MAAO,OAArB,SACGqD,EAAOiB,OAAOZ,6BAGrB,SAACkB,EAAA,GAAD,QACE/D,GAAId,EACJ8E,MAAM,WACNC,QAAQ,YACJzB,EAAO0B,cAAc,aAE1B1B,EAAO2B,QAAQrB,SAAWN,EAAOiB,OAAOX,UACvC,gBAAK5D,MAAO,CAAEC,MAAO,OAArB,SAA+BqD,EAAOiB,OAAOX,UAjCjD,eAoCGvB,OAAOC,KAAKvD,GAAUwD,KAAI,SAACC,GAAD,OACzB,4BACE,SAACqC,EAAA,GAAD,QACE/D,GAAId,EACJ8E,MAAOtC,EACPuC,QAAQ,YACJzB,EAAO0B,cAAP,mBAAiCxC,MAEtCc,EAAO2B,QAAQlG,UAAYuE,EAAOiB,OAAOxF,WACxC,gBAAKiB,MAAO,CAAEC,MAAO,OAArB,SAA+BqD,EAAOiB,OAAOxF,aARvCyD,OAYZ,SAAC6C,EAAA,EAAD,CAAQtD,KAAM,SAAUgD,QAAS,YAAa9E,MAAO,YAArD,0B,UC1IGqF,EAAgD,WAC3D,OAA8B7F,EAAAA,EAAAA,WAAkB,GAAhD,eAAOoD,EAAP,KAAgB0C,EAAhB,KAKA,OACE,iCACE,SAACF,EAAA,EAAD,CACEpF,MAAO,YACP8E,QAAQ,YACRS,KAAM,SACNC,QATY,kBAAMF,GAAW,IAK/B,mBAQA,UAAC5C,EAAD,CAAOE,QAASA,EAAhB,WACE,SAAC6C,EAAA,EAAD,CACE5E,GAAI,CAAE6E,WAAY,QAASC,OAAQ,WACnC3F,MAAO,YACPC,SAAU,SACVuF,QAjBW,kBAAMF,GAAW,OAmB9B,SAACpC,EAAD,WCgBR,EAjCoB,WAClB,IAAMtE,GAAUS,EAAAA,EAAAA,IAAeV,GACzBiH,GAAQvG,EAAAA,EAAAA,IAAeJ,GACvByB,GAASrB,EAAAA,EAAAA,IAAesB,EAAAA,IAE9B,OAAK/B,GASH,iBAAKqC,UAAWC,EAAAA,iBAAhB,WACE,4BACE,gBAAK2E,IAAG,OAAED,QAAF,IAAEA,EAAAA,EAASE,EAAAA,EAAW7E,UAAWC,EAAAA,cACzC,SAACT,EAAD,QAGF,wCACU,SAACrB,EAAD,QAEV,6CAAqBR,EAAQ4E,aAC7B,iDAAyB5E,EAAQ6E,eAAiB,MAAQ,SAC1D,sDAA8B7E,EAAQ8E,8BACtC,yCAAiB9E,EAAQ+E,YACzB,SAAC3B,EAAD,IACCtB,KAAM,OAAK9B,QAAL,IAAKA,OAAL,EAAKA,EAASoC,UAAU,SAACqE,EAAD,QArB/B,SAACzE,EAAA,EAAD,CAAKC,GAAI,CAAEC,MAAO,QAAlB,UACE,SAACC,EAAA,EAAD,OCvBR,EAA6B,4BAA7B,EAAiE,uBCAjE,EAAuB,mBCuBvB,MAdA,YAAuD,IAAvCgF,EAAsC,EAAtCA,QAASC,EAA6B,EAA7BA,WACjBJ,GAAQvG,EAAAA,EAAAA,IAAeJ,GAE7B,OACE,iBAAKgC,UAAWC,EAAhB,WACE,gBAAK2E,IAAG,OAAED,QAAF,IAAEA,EAAAA,EAASE,EAAAA,IAClBC,GACD,0BACE,oCAAYC,WCmDpB,MAxDA,YAA4C,IAAzBC,EAAwB,EAAxBA,QACXvH,GAAcW,EAAAA,EAAAA,IAAeb,GAG7B6E,IAFW9D,EAAAA,EAAAA,OAEF+D,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACb2C,MAAO,IAET9B,SAAU,SAACC,GACT,IAAMC,EAA0B,GAMhC,OALKD,EAAO6B,MAED7B,EAAO6B,MAAMC,OAAS,MAC/B7B,EAAO4B,MAAQ,gCAFf5B,EAAO4B,MAAQ,oBAIV5B,GAETE,SAAU,SAACH,GACT4B,EAAQ5B,EAAO6B,OACf7C,EAAO+C,gBAIPC,EAAe3H,EAAY4H,MAAMhE,KAAI,SAACiE,GAAD,OACvC,SAAC,EAAD,CAAiBC,GAAID,EAAEC,GAAIT,QAASQ,EAAER,QAASC,WAAYO,EAAEP,YAAlDO,EAAEC,OAGf,OACE,iBAAKvF,UAAWC,EAAhB,WACE,sCACA,iBAAMsD,SAAUnB,EAAOqB,aAAvB,UACE,UAACC,EAAA,EAAD,YACE,SAACC,EAAA,GAAD,QACE/D,GAAI,CAAEC,MAAO,OAAQqC,aAAc,OACnCoC,KAAK,QACLV,MAAM,mBACFxB,EAAO0B,cAAc,WAE1B1B,EAAO2B,QAAQkB,OACd,gBAAKnG,MAAO,CAAEC,MAAO,OAArB,SAA+BqD,EAAOiB,OAAO4B,QAC3C,MACJ,SAACd,EAAA,EAAD,CACEvE,GAAI,CAAEC,MAAO,QAAS2F,OAAQ,QAC9B3E,KAAM,SACNgD,QAAS,YACT9E,MAAO,YAJT,2BAUJ,gBAAKiB,UAAWC,EAAhB,SAA0BmF,QCxChC,GAFyBK,E,QAAAA,KAdD,SAACjI,GACvB,MAAO,CACLC,YAAaF,EAAoBC,OAIV,SAACa,GAC1B,MAAO,CACL2G,QAAS,SAACF,GACRzG,GAAS2G,EAAAA,EAAAA,IAAQF,QAKEW,CAA6CC,G,UCuCtE,OArDA,WAGE,OAFetH,EAAAA,EAAAA,IAAeuH,EAAAA,KAM5B,iBAAK3F,UAAWC,EAAAA,cAAhB,WACE,SAAC,EAAD,KACA,SAAC,EAAD,QALK,SAAC,KAAD,CAAU2F,GAAI,YCLZC,GAAmB,WAC9B,IAAMpG,GAASrB,EAAAA,EAAAA,IAAesB,EAAAA,IAAgBoG,WAExC/F,GAAWgG,EAAAA,EAAAA,MAAXhG,OACA1B,GAAWC,EAAAA,EAAAA,MAOjB,OALAM,EAAAA,EAAAA,YAAU,WACRP,GAAS2H,EAAAA,EAAAA,IAAc,OAACjG,QAAD,IAACA,EAAAA,EAAUN,IAClCpB,GAAS4H,EAAAA,EAAAA,IAAS,OAAClG,QAAD,IAACA,EAAAA,EAAUN,MAC5B,CAACM,KAEG,SAAC,GAAD","sources":["webpack://reack-kabzda-1/./src/components/Profile/ProfileInfo/ProfileInfo.module.scss?e49f","Selectors/profileSelector.ts","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ChangeProfileImage.tsx","components/Profile/ProfileInfo/ProfileContacts.tsx","components/Modal/Modal.style.ts","components/Modal/Modal.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Modal/ModalUpdateProfile.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://reack-kabzda-1/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://reack-kabzda-1/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainerFunc2.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__PWS0d\",\"imgProfile\":\"ProfileInfo_imgProfile__Rcj0i\",\"changePhoto\":\"ProfileInfo_changePhoto__YHZsi\",\"wrapper\":\"ProfileInfo_wrapper__ovsiH\",\"modal\":\"ProfileInfo_modal__PAygT\",\"modal__content\":\"ProfileInfo_modal__content__HQddJ\",\"modal__footer\":\"ProfileInfo_modal__footer__ducHJ\",\"modal__close\":\"ProfileInfo_modal__close__TPMmQ\"};","import { AppRootStateType } from \"../Redux/redux-store\";\nimport { ContactsType, ProfileType } from \"../components/Profile/Profile\";\nimport { ProfileStateType } from \"../Redux/profile-reducer\";\n\nexport const profilePageSelector = (\n  state: AppRootStateType\n): ProfileStateType => {\n  return state.profilePage;\n};\n\nexport const profileSelector = (state: AppRootStateType): ProfileType => {\n  return state.profilePage.profile;\n};\n\nexport const contactsSelector = (state: AppRootStateType): ContactsType => {\n  return state.profilePage.profile?.contacts;\n};\n\nexport const profileStatusSelector = (state: AppRootStateType): string => {\n  return state.profilePage.status;\n};\n\nexport const profileImageSelector = (\n  state: AppRootStateType\n): string | undefined => {\n  return state.profilePage.profile?.photos?.large;\n};\n","import React, { ChangeEvent, useEffect, useState } from \"react\";\nimport { useAppDispatch, useAppSelector } from \"../../../Redux/redux-store\";\nimport { getUpdateStatus } from \"../../../Redux/profile-reducer\";\nimport { profileStatusSelector } from \"../../../Selectors/profileSelector\";\n\nexport const ProfileStatus = () => {\n  let status = useAppSelector(profileStatusSelector);\n  const dispatch = useAppDispatch();\n\n  const [editMode, setEditMode] = useState(false);\n  const [profileStatus, setProfileStatus] = useState(status);\n\n  useEffect(() => {\n    setProfileStatus(status);\n  }, [status]);\n\n  const activateEditMode = () => {\n    setEditMode(true);\n  };\n\n  const deactivateEditMode = () => {\n    setEditMode(false);\n    if (profileStatus !== status) {\n      dispatch(getUpdateStatus(profileStatus));\n    }\n  };\n\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setProfileStatus(e.currentTarget.value);\n  };\n\n  return (\n    <div>\n      {!editMode && (\n        <div>\n          <span\n            onDoubleClick={activateEditMode}\n            style={{ color: \"black\", fontSize: \"20px\" }}\n          >\n            {status}\n          </span>\n        </div>\n      )}\n      {editMode && (\n        <div>\n          <input\n            onChange={onStatusChange}\n            autoFocus\n            onBlur={deactivateEditMode}\n            value={profileStatus}\n            style={{ fontSize: \"20px\" }}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from \"react\";\nimport s from \"./ProfileInfo.module.scss\";\nimport { useAppDispatch, useAppSelector } from \"../../../Redux/redux-store\";\nimport { profileSelector } from \"../../../Selectors/profileSelector\";\nimport { Box, IconButton, LinearProgress } from \"@mui/material\";\nimport { savePhoto } from \"../../../Redux/profile-reducer\";\nimport { userIDSelector } from \"../../../Selectors/appSelector\";\nimport Stack from \"@mui/material/Stack\";\nimport PartyModeIcon from \"@mui/icons-material/PartyMode\";\n\nexport const ChangeProfileImage = () => {\n  const profile = useAppSelector(profileSelector);\n  const userID = useAppSelector(userIDSelector);\n  const dispatch = useAppDispatch();\n\n  if (!profile) {\n    return (\n      <Box sx={{ width: \"100%\" }}>\n        <LinearProgress />\n      </Box>\n    );\n  }\n\n  const loadingPhoto = (e: any) => {\n    dispatch(savePhoto(e.target.files[0]));\n  };\n\n  return (\n    <div>\n      {userID === profile?.userId && (\n        <div className={s.changePhoto}>\n          <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\n            <IconButton\n              color=\"primary\"\n              aria-label=\"upload picture\"\n              component=\"label\"\n              onChange={loadingPhoto}\n            >\n              <input hidden accept=\"image/*\" type=\"file\" />\n              <PartyModeIcon fontSize=\"large\" />\n            </IconButton>\n          </Stack>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useAppSelector } from \"../../../Redux/redux-store\";\nimport { profileSelector } from \"../../../Selectors/profileSelector\";\n\nexport const ProfileContacts = () => {\n  const profile = useAppSelector(profileSelector);\n  console.log(profile);\n\n  if (profile?.contacts !== null) {\n    const contact = Object.keys(profile?.contacts).map((key) => (\n      <div key={key}>\n        {key} :{\" \"}\n        {profile?.contacts[key] === \"\"\n          ? \"No data available\"\n          : profile?.contacts[key]}\n      </div>\n    ));\n    return <div>My Contacts : {contact}</div>;\n  }\n  return <div>Нет данных</div>;\n};\n","import styled from \"styled-components\";\n\nexport const StyledModal = styled.div`\n  width: 350px;\n  min-height: 200px;\n  padding: 20px 30px;\n  background-color: white;\n  border-radius: 10px;\n  font-size: 18px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`;\n\nexport const Title = styled.h3`\n  text-align: center;\n  color: #0760b8;\n  font-size: 24px;\n`;\n\nexport const Label = styled.label`\n  display: block;\n  margin-top: 20px;\n  font-size: 16px;\n  font-style: italic;\n  font-weight: bold;\n`;\n\nexport const BtnsBlock = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: space-around;\n  margin: 30px 0 24px;\n`;\n\nexport const StyledInput = styled.input`\n  outline: none;\n  background: transparent;\n  border: transparent;\n  font-size: 18px;\n  border-bottom: 1px solid #1976d2;\n  padding: 10px 0 5px;\n  width: 100%;\n`;\n","import React, { FC, ReactNode, useState } from \"react\";\nimport { StyledModal } from \"./Modal.style\";\nimport ReactDOM from \"react-dom\";\nimport styled from \"styled-components\";\n\ntype ModalPropsType = {\n  isModal: boolean;\n  children: ReactNode;\n  opacity?: number;\n};\n\nexport const Modal: FC<ModalPropsType> = ({ children, isModal, opacity }) => {\n  const Block = styled.div`\n    &:before {\n      content: \"\";\n      background: #000;\n      position: fixed;\n      left: 0;\n      top: 0;\n      width: 100%;\n      height: 100%;\n      opacity: ${opacity ?? 0.6};\n    }\n  `;\n\n  if (!isModal) return null;\n\n  return ReactDOM.createPortal(\n    <Block>\n      <StyledModal>{children}</StyledModal>\n    </Block>,\n    document.body\n  );\n};\n","import React from \"react\";\nimport { useAppDispatch, useAppSelector } from \"../../../Redux/redux-store\";\nimport {\n  contactsSelector,\n  profileSelector,\n} from \"../../../Selectors/profileSelector\";\nimport { useFormik } from \"formik\";\nimport s from \"../../Login/Login.module.css\";\nimport {\n  Box,\n  Button,\n  Checkbox,\n  FormControlLabel,\n  FormGroup,\n  TextField,\n} from \"@mui/material\";\nimport { saveProfile } from \"../../../Redux/profile-reducer\";\n\ntype FormikErrorType = {\n  fullName?: string;\n  lookingForAJob?: boolean;\n  lookingForAJobDescription?: string;\n  aboutMe?: string;\n  contacts?: {\n    facebook: string;\n    website: string;\n    vk: string;\n    twitter: string;\n    instagram: string;\n    youtube: string;\n    github: string;\n    mainLink: string;\n  };\n};\n\nexport const ProfileDataForm = () => {\n  const dispatch = useAppDispatch();\n  const profile = useAppSelector(profileSelector);\n  const contacts = useAppSelector(contactsSelector);\n  const style = { width: \"30ch\", marginBottom: \"25px\", textColor: \"black\" };\n\n  const formik = useFormik({\n    initialValues: {\n      userID: profile?.userId,\n      fullName: profile?.fullName,\n      lookingForAJob: profile?.lookingForAJob,\n      lookingForAJobDescription: profile?.lookingForAJobDescription,\n      aboutMe: profile?.aboutMe,\n      contacts: {\n        facebook: contacts.facebook,\n        website: contacts.website,\n        vk: contacts.vk,\n        twitter: contacts.twitter,\n        instagram: contacts.instagram,\n        youtube: contacts.youtube,\n        github: contacts.github,\n        mainLink: contacts.mainLink,\n      },\n    },\n    validate: (values) => {\n      const errors: FormikErrorType = {};\n      if (!values.fullName) {\n        errors.fullName = \"Required\";\n      } else if (!/^[A-Z]/i.test(values.fullName)) {\n        errors.fullName = \"Invalid\";\n      }\n\n      if (!values.lookingForAJobDescription) {\n        errors.lookingForAJobDescription = \"Required\";\n      }\n\n      if (!values.aboutMe) {\n        errors.aboutMe = \"Required\";\n      }\n\n      if (!values.contacts) {\n        errors.contacts = {\n          vk: \"Required\",\n          facebook: \"Required\",\n          github: \"Required\",\n          instagram: \"Required\",\n          mainLink: \"Required\",\n          twitter: \"Required\",\n          website: \"Required\",\n          youtube: \"Required\",\n        };\n      }\n\n      return errors;\n    },\n    onSubmit: (values) => {\n      console.log(values);\n      dispatch(saveProfile(values));\n    },\n  });\n\n  return (\n    <form onSubmit={formik.handleSubmit} className={s.form}>\n      <Box>\n        <FormGroup>\n          <TextField\n            sx={style}\n            label=\"Full name\"\n            variant=\"standard\"\n            {...formik.getFieldProps(\"fullName\")}\n          />\n          {formik.touched.fullName && formik.errors.fullName && (\n            <div style={{ color: \"red\" }}>{formik.errors.fullName}</div>\n          )}\n          <FormControlLabel\n            label={\"Looking for a job\"}\n            control={<Checkbox {...formik.getFieldProps(\"lookingForAJob\")} />}\n          />\n          <TextField\n            sx={style}\n            label=\"My professional skills\"\n            variant=\"standard\"\n            {...formik.getFieldProps(\"lookingForAJobDescription\")}\n          />\n          {formik.touched.lookingForAJobDescription &&\n            formik.errors.lookingForAJobDescription && (\n              <div style={{ color: \"red\" }}>\n                {formik.errors.lookingForAJobDescription}\n              </div>\n            )}\n          <TextField\n            sx={style}\n            label=\"About me\"\n            variant=\"standard\"\n            {...formik.getFieldProps(\"aboutMe\")}\n          />\n          {formik.touched.aboutMe && formik.errors.aboutMe && (\n            <div style={{ color: \"red\" }}>{formik.errors.aboutMe}</div>\n          )}\n          My contacts:\n          {Object.keys(contacts).map((key) => (\n            <div key={key}>\n              <TextField\n                sx={style}\n                label={key}\n                variant=\"standard\"\n                {...formik.getFieldProps(`contacts.${key}`)}\n              />\n              {formik.touched.contacts && formik.errors.contacts && (\n                <div style={{ color: \"red\" }}>{formik.errors.contacts}</div>\n              )}\n            </div>\n          ))}\n          <Button type={\"submit\"} variant={\"contained\"} color={\"secondary\"}>\n            Save\n          </Button>\n        </FormGroup>\n      </Box>\n    </form>\n  );\n};\n","import React, { ChangeEvent, FC, useState } from \"react\";\nimport { Modal } from \"./Modal\";\nimport Button from \"@mui/material/Button\";\nimport { ProfileDataForm } from \"../Profile/ProfileInfo/ProfileDataForm\";\nimport CancelIcon from \"@mui/icons-material/Cancel\";\n\ntype ModalAddCardPropsType = {\n  addCard?: (title: string) => void;\n};\n\nexport const ModalUpdateProfile: FC<ModalAddCardPropsType> = () => {\n  const [isModal, setIsModal] = useState<boolean>(false);\n\n  const openModal = () => setIsModal(true);\n  const closeModal = () => setIsModal(false);\n\n  return (\n    <>\n      <Button\n        color={\"secondary\"}\n        variant=\"contained\"\n        size={\"medium\"}\n        onClick={openModal}\n      >\n        Edit\n      </Button>\n      <Modal isModal={isModal}>\n        <CancelIcon\n          sx={{ marginLeft: \"260px\", cursor: \"pointer\" }}\n          color={\"secondary\"}\n          fontSize={\"medium\"}\n          onClick={closeModal}\n        />\n        <ProfileDataForm />\n      </Modal>\n    </>\n  );\n};\n","import React from \"react\";\nimport s from \"./ProfileInfo.module.scss\";\nimport { ProfileStatus } from \"./ProfileStatus\";\nimport { useAppSelector } from \"../../../Redux/redux-store\";\nimport {\n  profileImageSelector,\n  profileSelector,\n} from \"../../../Selectors/profileSelector\";\nimport userPhoto from \"../../../assets/images/user.svg\";\nimport { Box, LinearProgress } from \"@mui/material\";\nimport { ChangeProfileImage } from \"./ChangeProfileImage\";\nimport { ProfileContacts } from \"./ProfileContacts\";\nimport { userIDSelector } from \"../../../Selectors/appSelector\";\nimport { ProfileDataForm } from \"./ProfileDataForm\";\nimport { ModalUpdateProfile } from \"../../Modal/ModalUpdateProfile\";\n\nconst ProfileInfo = () => {\n  const profile = useAppSelector(profileSelector);\n  const image = useAppSelector(profileImageSelector);\n  const userID = useAppSelector(userIDSelector);\n\n  if (!profile) {\n    return (\n      <Box sx={{ width: \"100%\" }}>\n        <LinearProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <div className={s.descriptionBlock}>\n      <div>\n        <img src={image ?? userPhoto} className={s.imgProfile} />\n        <ChangeProfileImage />\n      </div>\n\n      <span>\n        Status: <ProfileStatus />\n      </span>\n      <div>My Full Name - {profile.fullName}</div>\n      <div>Looking for a job: {profile.lookingForAJob ? \"Yes\" : \"No\"}</div>\n      <div>My professional skills: {profile.lookingForAJobDescription}</div>\n      <div>About me : {profile.aboutMe}</div>\n      <ProfileContacts />\n      {userID === profile?.userId && <ModalUpdateProfile />}\n    </div>\n  );\n};\n\nexport default ProfileInfo;\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__TVyob\",\"posts\":\"MyPosts_posts__EISKx\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__G733n\"};","import React from \"react\";\nimport s from \"./Post.module.css\";\nimport { PostPropsType } from \"../../../../Redux/profile-reducer\";\nimport { useAppSelector } from \"../../../../Redux/redux-store\";\nimport {\n  profileImageSelector,\n  profileSelector,\n} from \"../../../../Selectors/profileSelector\";\nimport userPhoto from \"../../../../assets/images/user.svg\";\n\nfunction Post({ message, likeCounts }: PostPropsType) {\n  const image = useAppSelector(profileImageSelector);\n\n  return (\n    <div className={s.item}>\n      <img src={image ?? userPhoto} />\n      {message}\n      <div>\n        <span>like {likeCounts}</span>\n      </div>\n    </div>\n  );\n}\n\nexport default Post;\n","import React from \"react\";\nimport s from \"./MyPosts.module.css\";\nimport Post from \"./Post/Post\";\nimport { MyPostsType } from \"./MyPostsContainer\";\nimport { useAppDispatch, useAppSelector } from \"../../../Redux/redux-store\";\nimport { useFormik } from \"formik\";\nimport { Button, FormGroup, TextField } from \"@mui/material\";\nimport { profilePageSelector } from \"../../../Selectors/profileSelector\";\n\ntype FormikErrorType = {\n  title?: string;\n};\n\nfunction MyPosts({ addPost }: MyPostsType) {\n  const profilePage = useAppSelector(profilePageSelector);\n  const dispatch = useAppDispatch();\n\n  const formik = useFormik({\n    initialValues: {\n      title: \"\",\n    },\n    validate: (values) => {\n      const errors: FormikErrorType = {};\n      if (!values.title) {\n        errors.title = \"Field is required\";\n      } else if (values.title.length > 300) {\n        errors.title = \"Maximum value 300 characters\";\n      }\n      return errors;\n    },\n    onSubmit: (values) => {\n      addPost(values.title);\n      formik.resetForm();\n    },\n  });\n\n  let postsElement = profilePage.posts.map((p) => (\n    <Post key={p.id} id={p.id} message={p.message} likeCounts={p.likeCounts} />\n  ));\n\n  return (\n    <div className={s.postsBlock}>\n      <h3>My posts</h3>\n      <form onSubmit={formik.handleSubmit}>\n        <FormGroup>\n          <TextField\n            sx={{ width: \"30ch\", marginBottom: \"5px\" }}\n            size=\"small\"\n            label=\"Enter your post\"\n            {...formik.getFieldProps(\"title\")}\n          />\n          {formik.touched.title ? (\n            <div style={{ color: \"red\" }}>{formik.errors.title}</div>\n          ) : null}\n          <Button\n            sx={{ width: \"100px\", height: \"40px\" }}\n            type={\"submit\"}\n            variant={\"contained\"}\n            color={\"secondary\"}\n          >\n            publish\n          </Button>\n        </FormGroup>\n      </form>\n      <div className={s.posts}>{postsElement}</div>\n    </div>\n  );\n}\n\nexport default MyPosts;\n","import React from \"react\";\nimport { addPost, ProfileStateType } from \"../../../Redux/profile-reducer\";\nimport MyPosts from \"./MyPosts\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { AppStateType } from \"../../../Redux/redux-store\";\nimport { profilePageSelector } from \"../../../Selectors/profileSelector\";\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\n  return {\n    profilePage: profilePageSelector(state),\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\n  return {\n    addPost: (message: string) => {\n      dispatch(addPost(message));\n    },\n  };\n};\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\n\nexport default MyPostsContainer;\n\ntype MapStatePropsType = {\n  profilePage: ProfileStateType;\n};\n\ntype MapDispatchPropsType = {\n  addPost: (message: string) => void;\n};\n\nexport type MyPostsType = MapStatePropsType & MapDispatchPropsType;\n","import React from \"react\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport { Navigate } from \"react-router-dom\";\nimport { useAppSelector } from \"../../Redux/redux-store\";\nimport s from \"./ProfileInfo/ProfileInfo.module.scss\";\nimport { isAuthSelector } from \"../../Selectors/appSelector\";\n\nfunction Profile() {\n  const isAuth = useAppSelector(isAuthSelector);\n\n  if (!isAuth) {\n    return <Navigate to={\"/login\"} />;\n  }\n  return (\n    <div className={s.picturesBlock}>\n      <ProfileInfo />\n      <MyPostsContainer />\n    </div>\n  );\n}\n\nexport type ProfilePagePropsType = {\n  profile: ProfileType;\n};\n\nexport type ProfileType = {\n  aboutMe?: string | null;\n  contacts?: ContactsType;\n  lookingForAJob?: boolean;\n  lookingForAJobDescription?: string | null;\n  fullName?: string | null;\n  userId?: number;\n  photos?: {\n    small?: string | undefined;\n    large?: string | undefined;\n  };\n} | null;\n\nexport type ProfileDescriptionType = {\n  userId?: number;\n  contacts?: ContactsType | null | undefined;\n  fullName: string | null | undefined;\n  lookingForAJob: boolean | undefined;\n  lookingForAJobDescription: string | null | undefined;\n  aboutMe: string | null | undefined;\n} | null;\n\nexport type ContactsType =\n  | {\n      facebook: string;\n      website: string;\n      vk: string;\n      twitter: string;\n      instagram: string;\n      youtube: string;\n      github: string;\n      mainLink: string;\n    }\n  | any;\n\nexport default Profile;\n","import React, { useEffect } from \"react\";\nimport Profile from \"./Profile\";\nimport { getStatus, getUserProfile } from \"../../Redux/profile-reducer\";\nimport { useParams } from \"react-router-dom\";\nimport { useAppDispatch, useAppSelector } from \"../../Redux/redux-store\";\nimport { userIDSelector } from \"../../Selectors/appSelector\";\n\nexport const ProfileContainer = () => {\n  const userID = useAppSelector(userIDSelector).toString();\n\n  let { userId } = useParams();\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(getUserProfile(userId ?? userID));\n    dispatch(getStatus(userId ?? userID));\n  }, [userId]);\n\n  return <Profile />;\n};\n"],"names":["profilePageSelector","state","profilePage","profileSelector","profile","contactsSelector","contacts","profileStatusSelector","status","profileImageSelector","photos","large","ProfileStatus","useAppSelector","dispatch","useAppDispatch","useState","editMode","setEditMode","profileStatus","setProfileStatus","useEffect","onDoubleClick","style","color","fontSize","onChange","e","currentTarget","value","autoFocus","onBlur","getUpdateStatus","ChangeProfileImage","userID","userIDSelector","Box","sx","width","LinearProgress","userId","className","s","Stack","direction","alignItems","spacing","IconButton","component","savePhoto","target","files","hidden","accept","type","PartyMode","ProfileContacts","console","log","contact","Object","keys","map","key","StyledModal","styled","Modal","children","isModal","opacity","Block","ReactDOM","document","body","ProfileDataForm","marginBottom","textColor","formik","useFormik","initialValues","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","facebook","website","vk","twitter","instagram","youtube","github","mainLink","validate","values","errors","test","onSubmit","saveProfile","handleSubmit","FormGroup","TextField","label","variant","getFieldProps","touched","FormControlLabel","control","Checkbox","Button","ModalUpdateProfile","setIsModal","size","onClick","Cancel","marginLeft","cursor","image","src","userPhoto","message","likeCounts","addPost","title","length","resetForm","postsElement","posts","p","id","height","connect","MyPosts","isAuthSelector","to","ProfileContainer","toString","useParams","getUserProfile","getStatus"],"sourceRoot":""}